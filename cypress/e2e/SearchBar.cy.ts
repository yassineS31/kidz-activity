describe("SearchBar Component", () => {
  beforeEach(() => {
    // R√©cup√©ration de l'API de recherche
    cy.intercept("GET", "**/api/search*", {
      fixture: "searchResults.json",
    }).as("searchAPI");

    // Visiter la page d'accueil
    cy.visit("http://localhost:3000");
  });

  describe("Interface utilisateur de base", () => {
    it("affiche tous les √©l√©ments de l'interface", () => {
      // V√©rifier la pr√©sence du champ de recherche
      cy.get('input[placeholder*="Rechercher une activit√©"]').should(
        "be.visible"
      );

      // V√©rifier les boutons de filtre
      cy.contains("button", "Pour").should("be.visible");
      cy.contains("button", "Prix").should("be.visible");

      // V√©rifier le bouton de recherche
      cy.contains("button", "Chercher").should("be.visible");
    });

    it("a le placeholder correct dans le champ de recherche", () => {
      cy.get('input[placeholder*="Rechercher une activit√©"]').should(
        "have.attr",
        "placeholder",
        "Rechercher une activit√©, un utilisateur..."
      );
    });
  });

  describe("Fonctionnalit√© de recherche", () => {
    it("effectue une recherche avec debounce", () => {
      const searchTerm = "football";

      cy.get('input[placeholder*="Rechercher une activit√©"]').type(searchTerm, {
        delay: 100,
      });

      // Attendre le debounce (300ms)
      cy.wait(350);

      // V√©rifier que l'API est appel√©e
      cy.wait("@searchAPI").then((interception) => {
        expect(interception.request.query.query).to.equal(searchTerm);
      });
    });

    it("affiche les r√©sultats de recherche", () => {
      cy.get('input[placeholder*="Rechercher une activit√©"]')
        .wait(350)
        .type("football");

      cy.wait("@searchAPI");

      // V√©rifier que le dropdown est visible
      cy.get('[data-cy="search-dropdown"]', { timeout: 1000 }).should(
        "be.visible"
      );
    });

    it("n'effectue pas de recherche pour moins de 2 caract√®res", () => {
      cy.get('input[placeholder*="Rechercher une activit√©"]').type("f");

      cy.wait(350);

      // V√©rifier que l'API n'est pas appel√©e
      cy.get("@searchAPI.all").should("have.length", 0);

      // V√©rifier que le dropdown n'est pas visible
      cy.get('[data-cy="search-dropdown"]').should("not.exist");
    });

    it("efface la recherche avec le bouton X", () => {
      cy.get('input[placeholder*="Rechercher une activit√©"]').type("football");

      // Cliquer sur le bouton de suppression
      cy.get('[data-lucide="x"]').click();

      // V√©rifier que le champ est vide
      cy.get('input[placeholder*="Rechercher une activit√©"]').should(
        "have.value",
        ""
      );

      // V√©rifier que le dropdown est ferm√©
      cy.get('[data-cy="search-dropdown"]').should("not.exist");
    });
  });

  describe("Navigation au clavier", () => {
    beforeEach(() => {
      // Effectuer une recherche pour avoir des r√©sultats
      cy.get('input[placeholder*="Rechercher une activit√©"]').type("football");
      cy.wait("@searchAPI");
    });

    it("navigue avec les fl√®ches du clavier", () => {
      cy.get('input[placeholder*="Rechercher une activit√©"]')
        .focus()
        .type("{downarrow}");

      // V√©rifier que le premier √©l√©ment est s√©lectionn√©
      cy.get('[data-cy="search-result"]:first').should(
        "have.class",
        "bg-purple-50"
      );
    });

    it("s√©lectionne un r√©sultat avec Enter", () => {
      cy.get('input[placeholder*="Rechercher une activit√©"]')
        .focus()
        .type("{downarrow}")
        .type("{enter}");

      // V√©rifier la navigation (√† adapter selon votre routeur)
      cy.url().should("include", "/activite/");
    });

    it("ferme le dropdown avec Escape", () => {
      cy.get('input[placeholder*="Rechercher une activit√©"]')
        .focus()
        .type("{esc}");

      cy.get('[data-cy="search-dropdown"]').should("not.exist");
    });
  });

  describe("Filtres - Profils", () => {
    it("ouvre et ferme le dropdown des profils", () => {
      cy.contains("button", "Pour").click();

      cy.get('[data-cy="profile-dropdown"]').should("be.visible");

      // Fermer en cliquant √† l'ext√©rieur
      cy.get("body").click(0, 0);
      cy.get('[data-cy="profile-dropdown"]').should("not.exist");
    });

    it("s√©lectionne et d√©s√©lectionne des profils", () => {
      cy.contains("button", "Pour").click();

      // S√©lectionner Emma
      cy.contains("Emma (8 ans)").click();

      // V√©rifier que la checkbox est coch√©e
      cy.contains("Emma (8 ans)")
        .parent()
        .find('[data-lucide="check"]')
        .should("be.visible");

      // V√©rifier l'indicateur de s√©lection
      cy.contains(".bg-purple-100", "Emma (8 ans)").should("be.visible");

      // D√©s√©lectionner
      cy.contains("Emma (8 ans)").click();
      cy.get(".bg-purple-100").should("not.exist");
    });

    it("applique les filtres de profil √† la recherche", () => {
      // S√©lectionner un profil
      cy.contains("button", "Pour").click();
      cy.contains("Emma (8 ans)").click();
      cy.get("body").click(0, 0); // Fermer le dropdown

      // Effectuer une recherche
      cy.get('input[placeholder*="Rechercher une activit√©"]').type("football");

      cy.wait("@searchAPI").then((interception) => {
        expect(interception.request.query.profiles).to.include("1");
      });
    });
  });

  describe("Filtres - Prix", () => {
    it("ouvre et ferme le dropdown des prix", () => {
      cy.contains("button", "Prix").click();

      cy.get('[data-cy="price-dropdown"]').should("be.visible");

      // Fermer en cliquant ailleurs
      cy.get("body").click(0, 0);
      cy.get('[data-cy="price-dropdown"]').should("not.exist");
    });

    it("s√©lectionne des fourchettes de prix", () => {
      cy.contains("button", "Prix").click();

      // S√©lectionner "Gratuit"
      cy.contains("Gratuit").click();

      // V√©rifier l'indicateur
      cy.contains(".bg-emerald-100", "Gratuit").should("be.visible");

      // S√©lectionner une autre fourchette
      cy.contains("0-20‚Ç¨").click();
      cy.contains(".bg-emerald-100", "0-20‚Ç¨").should("be.visible");
    });

    it("applique les filtres de prix √† la recherche", () => {
      // S√©lectionner un prix
      cy.contains("button", "Prix").click();
      cy.contains("Gratuit").click();
      cy.get("body").click(0, 0);

      // Effectuer une recherche
      cy.get('input[placeholder*="Rechercher une activit√©"]').type("football");

      cy.wait("@searchAPI").then((interception) => {
        expect(interception.request.query.prices).to.include("gratuit");
      });
    });
  });

  describe("Interactions avec les r√©sultats", () => {
    beforeEach(() => {
      cy.get('input[placeholder*="Rechercher une activit√©"]').type("football");
      cy.wait("@searchAPI");
    });

    it("affiche les ic√¥nes correctes selon le type", () => {
      // V√©rifier les ic√¥nes pour chaque type
      cy.get('[data-cy="search-result"]').each(($el) => {
        const resultType = $el.attr("data-type");

        if (resultType === "activite") {
          cy.wrap($el).should("contain", "üéØ");
        } else if (resultType === "utilisateur") {
          cy.wrap($el).should("contain.oneOf", ["üë®‚Äçüè´", "üë®‚Äçüëß‚Äçüë¶", "üë§"]);
        } else if (resultType === "categorie") {
          cy.wrap($el).should("contain", "üìÅ");
        }
      });
    });

    it("surligne le terme recherch√©", () => {
      cy.get('[data-cy="search-result"]')
        .first()
        .find("mark.bg-emerald-200")
        .should("exist");
    });

    it("navigue vers le bon URL en cliquant sur un r√©sultat", () => {
      cy.get('[data-cy="search-result"]').first().click();

      // V√©rifier la navigation (√† adapter selon vos URLs)
      cy.url().should("not.equal", Cypress.config().baseUrl + "/");
    });
  });

  describe("√âtats de chargement et d'erreur", () => {
    it("affiche un indicateur de chargement", () => {
      // Mock d'une r√©ponse lente
      cy.intercept("GET", "**/api/search*", {
        delay: 2000,
        fixture: "searchResults.json",
      }).as("slowSearchAPI");

      cy.get('input[placeholder*="Rechercher une activit√©"]').type("football");

      // V√©rifier l'indicateur de chargement
      cy.contains("Recherche en cours...").should("be.visible");
      cy.get(".animate-spin").should("be.visible");
    });

    it("affiche un message d'erreur en cas d'√©chec", () => {
      // Mock d'une erreur API
      cy.intercept("GET", "**/api/search*", {
        statusCode: 500,
        body: { error: "Erreur serveur" },
      }).as("errorSearchAPI");

      cy.get('input[placeholder*="Rechercher une activit√©"]').type("football");

      cy.wait("@errorSearchAPI");

      cy.contains("Erreur lors de la recherche").should("be.visible");
    });

    it("affiche un message quand aucun r√©sultat n'est trouv√©", () => {
      // Mock d'une r√©ponse vide
      cy.intercept("GET", "**/api/search*", {
        body: [],
      }).as("emptySearchAPI");

      cy.get('input[placeholder*="Rechercher une activit√©"]').type("zzzzz");

      cy.wait("@emptySearchAPI");

      cy.contains("Aucun r√©sultat trouv√©").should("be.visible");
    });
  });

  describe("Bouton de recherche manuel", () => {
    it("d√©clenche une recherche en cliquant sur le bouton", () => {
      cy.get('input[placeholder*="Rechercher une activit√©"]').type("football", {
        delay: 0,
      }); // Pas de delay pour √©viter le debounce

      cy.contains("button", "Chercher").click();

      cy.wait("@searchAPI");
    });

    it("est d√©sactiv√© pendant le chargement", () => {
      cy.intercept("GET", "**/api/search*", {
        delay: 1000,
        fixture: "searchResults.json",
      }).as("slowSearchAPI");

      cy.get('input[placeholder*="Rechercher une activit√©"]').type("football");

      cy.contains("button", "Recherche...").should("be.disabled");
    });
  });

  describe("S√©curit√© et validation", () => {
    it("√©chappe les caract√®res HTML dans les r√©sultats", () => {
      const maliciousInput = '<script>alert("xss")</script>';

      cy.get('input[placeholder*="Rechercher une activit√©"]').type(
        maliciousInput
      );

      // V√©rifier que le script n'est pas ex√©cut√©
      cy.get('[data-cy="search-result"]').should("not.contain", "<script>");
    });

    it("nettoie les espaces en d√©but et fin", () => {
      cy.get('input[placeholder*="Rechercher une activit√©"]').type(
        "  football  "
      );

      cy.wait("@searchAPI").then((interception) => {
        expect(interception.request.query.query).to.equal("football");
      });
    });
  });

  describe("Responsive et accessibilit√©", () => {
    it("est utilisable sur mobile", () => {
      cy.viewport("iphone-x");

      cy.get('input[placeholder*="Rechercher une activit√©"]')
        .should("be.visible")
        .type("football");

      cy.wait("@searchAPI");

      cy.get('[data-cy="search-dropdown"]').should("be.visible");
    });
  });
});
